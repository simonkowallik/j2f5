{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"this is index.md","title":"Home"},{"location":"iapp_macro_delimters/","text":"1 2 3 4 5 6 7 8 9 # iApp macro engine for iRules: https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-iapps-developer-11-4-0/3.html defaults_iapp_macro_engine = dict( BLOCK_START_STRING = '<%', BLOCK_END_STRING = '%>', VARIABLE_START_STRING = '<%=', VARIABLE_END_STRING = '%>', COMMENT_START_STRING = '<#', # iApp macro engine has no comment functionality COMMENT_END_STRING = '#>', # iApp macro engine has no comment functionality )","title":"iApp macro engine for iRules: https://techdocs.f5.com/kb/en-us/products/big-ip_ltm/manuals/product/bigip-iapps-developer-11-4-0/3.html"},{"location":"mdtesting/","text":"tcl code: 1 2 3 4 5 6 when RULE_INIT { set static::debug 1 } proc foo {} { } Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. this is the title! Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Info an info Warning a warning Danger Will, danger!","title":"Mdtesting"},{"location":"word-of-warning/","text":"A word of warning \u00b6 Excessive use of templating and 'code generation logic' in iRules (..) will make it harder to understand and debug. So choose the level of pre-processing, parameterization and use of constants wisely.","title":"A word of warning"},{"location":"word-of-warning/#a-word-of-warning","text":"Excessive use of templating and 'code generation logic' in iRules (..) will make it harder to understand and debug. So choose the level of pre-processing, parameterization and use of constants wisely.","title":"A word of warning"},{"location":"usecases/","text":"","title":"Index"},{"location":"usecases/constants/","text":"Constants \u00b6 Constants? \u00b6 Wikipedia says: In computer programming, a constant is a value that cannot be altered by the program during normal execution, i.e., the value is constant. ... This is contrasted with a variable, which is an identifier with a value that can be changed during normal execution, i.e., the value is variable. Constants are useful for both programmers ... they are a form of self-documenting code. ... https://en.wikipedia.org/wiki/Constant_(computer_programming) Tcl (and therefore iRules) doesn't come with constants. Many iRule authors typically fallback to static:: variables because the name implies they are static (i.e. can't be modified). (not so) static:: \u00b6 What static:: actually means the variable is global per tmm it can be modified, but the modification only applies for the tmm it was modified from setting the same variable in different iRules typically leads to inconsistencies (\"the last set operation wins, behavior is different then expected\") it doesn't demote CMP (that's great) https://support.f5.com/csp/article/K13033#static static:: variables are often used to alter the behavior or provide configuration flags to iRules. Often this also increases the processing required to execute the iRule due to added logic. Other times it is used to make specific things configurable to an Operator who is not necessarily skilled enough to work her/his way through the entire code. Example: 1 2 3 4 5 6 7 8 when RULE_INIT { set static::syslog_severity { debug } } when HTTP_REQUEST { # ... log local0. $static::syslog_severity \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } In the above iRule the syslog severity is set using a static:: variable. If the same variable name is used in another iRule, the last set operation would determine the value for all iRules using the variable. How can we use jinja2 instead? \u00b6 Create a configuration.yaml : 1 2 syslog : severity : debug Place the iRule in example.irule.j2 : 1 2 3 4 5 when HTTP_REQUEST { # ... log local0. {{ syslog.severity }} \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } Using j2cli : 1 j2 example.irule.j2 configuration.yaml produces: 1 2 3 4 5 when HTTP_REQUEST { # ... log local0.debug \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } Hint This actually improves performance as well, as no memory needs to be assigned for the variable nor needs to be read. Admitted, in the above example the improvement is negligible.","title":"Constants"},{"location":"usecases/constants/#constants","text":"","title":"Constants"},{"location":"usecases/constants/#constants_1","text":"Wikipedia says: In computer programming, a constant is a value that cannot be altered by the program during normal execution, i.e., the value is constant. ... This is contrasted with a variable, which is an identifier with a value that can be changed during normal execution, i.e., the value is variable. Constants are useful for both programmers ... they are a form of self-documenting code. ... https://en.wikipedia.org/wiki/Constant_(computer_programming) Tcl (and therefore iRules) doesn't come with constants. Many iRule authors typically fallback to static:: variables because the name implies they are static (i.e. can't be modified).","title":"Constants?"},{"location":"usecases/constants/#not-so-static","text":"What static:: actually means the variable is global per tmm it can be modified, but the modification only applies for the tmm it was modified from setting the same variable in different iRules typically leads to inconsistencies (\"the last set operation wins, behavior is different then expected\") it doesn't demote CMP (that's great) https://support.f5.com/csp/article/K13033#static static:: variables are often used to alter the behavior or provide configuration flags to iRules. Often this also increases the processing required to execute the iRule due to added logic. Other times it is used to make specific things configurable to an Operator who is not necessarily skilled enough to work her/his way through the entire code. Example: 1 2 3 4 5 6 7 8 when RULE_INIT { set static::syslog_severity { debug } } when HTTP_REQUEST { # ... log local0. $static::syslog_severity \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } In the above iRule the syslog severity is set using a static:: variable. If the same variable name is used in another iRule, the last set operation would determine the value for all iRules using the variable.","title":"(not so) static::"},{"location":"usecases/constants/#how-can-we-use-jinja2-instead","text":"Create a configuration.yaml : 1 2 syslog : severity : debug Place the iRule in example.irule.j2 : 1 2 3 4 5 when HTTP_REQUEST { # ... log local0. {{ syslog.severity }} \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } Using j2cli : 1 j2 example.irule.j2 configuration.yaml produces: 1 2 3 4 5 when HTTP_REQUEST { # ... log local0.debug \"[HTTP::method] [HTTP::uri] HTTP/[HTTP::version]\" # ... } Hint This actually improves performance as well, as no memory needs to be assigned for the variable nor needs to be read. Admitted, in the above example the improvement is negligible.","title":"How can we use jinja2 instead?"},{"location":"usecases/parameters/","text":"Parameterization \u00b6 It isn't uncommon for iRule authors to parameterize iRules. There are multiple approaches and there is no \"one fits all\" approach or \"best way to do it\". An example \u00b6 Data Groups: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ltm data-group internal blocking_hostnames { records { www.example.com { data \"\" } app.example.net { data \"\" } } type string } ltm data-group internal html_response { records { title { data \"Your request was blocked\" } message { data \"We didn't like your request, sorry.\" } } } iRule: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 when RULE_INIT { set static::dg_blocking_name { blocking_hostnames } set static::dg_response_text { html_response } } when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals $static::dg_blocking_name ] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} $static::dg_response_text]</head> <body>[class lookup {message} $static::dg_response_text]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } Complaints? \u00b6 Yes, some. The data-group blocking_hostnames stores FQDNs (as keys), the iRule looks up the HTTP host header against it to determine if a HTTP response should be generated. The HTML response is also defined in a data-group. In this case it doesn't seem likely this is re-used anywhere else nor extended as the keys are hard-coded in the iRule. The iRule uses static:: variables to reference the data-group names. On the first look this allows re-use of the iRule by modifying the values of the static:: variables, but that's not the case. See Constants . Rule of thumb In general separating data (data-groups) and configuration (constants, data-groups) from the code (iRules) is a good approach. It breaks up complexity, supports automation and configuration by non-iRule-savvy Operators and allows for better re-use of code. Use data-groups when: (a lot) of entries are required data-group is re-used in multiple areas data changes often data should be changeable via an API (independently from the code) the data is too big for an iRule (might indicate that the data-group isn't perfectly suited either -> iFile?) a non iRule-savvy Operator should change the data Jinja2 \u00b6 variant 1 \u00b6 Data Groups untouched. iRule ( irule.j2 ): 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals {{ data_group.blocking_name }}] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} {{data_group.response_text}}]</head> <body>[class lookup {message} {{data_group.response_text}}]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } configuration.yaml : 1 2 3 data_group : blocking_name : blocking_hostnames response_text : html_response 1 j2 irule.j2 configuration.yaml produces: 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals blocking_hostnames ] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} response_text]</head> <body>[class lookup {message} response_text]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } variant 2 \u00b6 Data Groups: ltm data-group internal html_response removed. iRule ( irule.j2 ): 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals {{ data_group.blocking_name }}] } { HTTP :: respond 403 content \" <html> <head>{{response_text.title}}</head> <body>{{response_text.message}}</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } configuration.yaml : 1 2 3 4 5 data_group : blocking_name : blocking_hostnames response_text : title : \"Your request was blocked\" message : \"We didn't like your request, sorry.\" running j2cli : 1 j2 irule.j2 configuration.yaml produces: 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals blocking_hostnames ] } { HTTP :: respond 403 content \" <html> <head>Your request was blocked</head> <body>We didn't like your request, sorry.</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } Improvement: Down from three to one data group lookup operation!","title":"Parameterization"},{"location":"usecases/parameters/#parameterization","text":"It isn't uncommon for iRule authors to parameterize iRules. There are multiple approaches and there is no \"one fits all\" approach or \"best way to do it\".","title":"Parameterization"},{"location":"usecases/parameters/#an-example","text":"Data Groups: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ltm data-group internal blocking_hostnames { records { www.example.com { data \"\" } app.example.net { data \"\" } } type string } ltm data-group internal html_response { records { title { data \"Your request was blocked\" } message { data \"We didn't like your request, sorry.\" } } } iRule: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 when RULE_INIT { set static::dg_blocking_name { blocking_hostnames } set static::dg_response_text { html_response } } when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals $static::dg_blocking_name ] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} $static::dg_response_text]</head> <body>[class lookup {message} $static::dg_response_text]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } }","title":"An example"},{"location":"usecases/parameters/#complaints","text":"Yes, some. The data-group blocking_hostnames stores FQDNs (as keys), the iRule looks up the HTTP host header against it to determine if a HTTP response should be generated. The HTML response is also defined in a data-group. In this case it doesn't seem likely this is re-used anywhere else nor extended as the keys are hard-coded in the iRule. The iRule uses static:: variables to reference the data-group names. On the first look this allows re-use of the iRule by modifying the values of the static:: variables, but that's not the case. See Constants . Rule of thumb In general separating data (data-groups) and configuration (constants, data-groups) from the code (iRules) is a good approach. It breaks up complexity, supports automation and configuration by non-iRule-savvy Operators and allows for better re-use of code. Use data-groups when: (a lot) of entries are required data-group is re-used in multiple areas data changes often data should be changeable via an API (independently from the code) the data is too big for an iRule (might indicate that the data-group isn't perfectly suited either -> iFile?) a non iRule-savvy Operator should change the data","title":"Complaints?"},{"location":"usecases/parameters/#jinja2","text":"","title":"Jinja2"},{"location":"usecases/parameters/#variant-1","text":"Data Groups untouched. iRule ( irule.j2 ): 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals {{ data_group.blocking_name }}] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} {{data_group.response_text}}]</head> <body>[class lookup {message} {{data_group.response_text}}]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } configuration.yaml : 1 2 3 data_group : blocking_name : blocking_hostnames response_text : html_response 1 j2 irule.j2 configuration.yaml produces: 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals blocking_hostnames ] } { HTTP :: respond 403 content \" <html> <head>[class lookup {title} response_text]</head> <body>[class lookup {message} response_text]</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } }","title":"variant 1"},{"location":"usecases/parameters/#variant-2","text":"Data Groups: ltm data-group internal html_response removed. iRule ( irule.j2 ): 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals {{ data_group.blocking_name }}] } { HTTP :: respond 403 content \" <html> <head>{{response_text.title}}</head> <body>{{response_text.message}}</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } configuration.yaml : 1 2 3 4 5 data_group : blocking_name : blocking_hostnames response_text : title : \"Your request was blocked\" message : \"We didn't like your request, sorry.\" running j2cli : 1 j2 irule.j2 configuration.yaml produces: 1 2 3 4 5 6 7 8 9 10 11 12 when HTTP_REQUEST { set host_name [ string tolower [ HTTP :: header value { Host }]] if { [ class match -- $host_name equals blocking_hostnames ] } { HTTP :: respond 403 content \" <html> <head>Your request was blocked</head> <body>We didn't like your request, sorry.</body> </html> \" Content-Type { text / html } Connection { Close } TCP :: close } } Improvement: Down from three to one data group lookup operation!","title":"variant 2"},{"location":"usecases/preprocess/","text":"","title":"Preprocess"},{"location":"why-j2f5/","text":"","title":"Index"},{"location":"why-j2f5/customization/","text":"","title":"Customization"},{"location":"why-j2f5/features/","text":"","title":"Features"}]}